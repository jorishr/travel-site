/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

body {
  font-family: 'roboto, sans-serif';
  color: #333; }

img {
  max-width: 100%;
  height: auto; }

* {
  box-sizing: border-box; }

a {
  color: #d59541; }

.wrapper {
  padding-left: 1.125rem;
  padding-right: 1.125rem;
  max-width: 1236px;
  margin-left: auto;
  margin-right: auto;
  overflow: hidden; }
  .wrapper--medium {
    max-width: 976px; }
  .wrapper--mobile {
    padding-left: 0;
    padding-right: 0; }
    @media (min-width: 1010px) {
      .wrapper--mobile {
        padding-left: 1.125rem;
        padding-right: 1.125rem; } }
  .wrapper--bottomMargin {
    margin-bottom: 1rem; }
    @media (min-width: 530px) {
      .wrapper--bottomMargin {
        margin-bottom: 3.875rem; } }
  .wrapper .wrapper {
    padding-left: 0;
    padding-right: 0; }

.large-hero {
  position: relative;
  border-bottom: 10px solid #2f5572; }
  .large-hero__text-content {
    position: absolute;
    top: 50%;
    padding-top: 60px;
    text-align: center;
    width: 100%;
    left: 0;
    text-align: center;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%); }
  .large-hero__title {
    font-size: 2.4rem;
    color: #2f5572;
    font-weight: 300;
    margin: 0; }
    @media (min-width: 530px) {
      .large-hero__title {
        font-size: 4.8rem; } }
  .large-hero__subtitle {
    font-size: 1.5rem;
    color: #2f5572;
    font-weight: 300;
    margin: 0; }
    @media (min-width: 530px) {
      .large-hero__subtitle {
        font-size: 2.9rem; } }
  .large-hero__text {
    color: #FFF;
    font-size: 1.1rem;
    font-weight: 100;
    text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1);
    max-width: 30rem;
    margin-left: auto;
    margin-right: auto; }
    @media (min-width: 530px) {
      .large-hero__text {
        font-size: 1.875rem; } }
  .large-hero__image {
    display: block; }

.btn {
  background-color: #2f5572;
  color: #FFF;
  text-decoration: none;
  padding: .75rem 1.2rem;
  display: inline-block; }
  .btn--orange {
    background-color: #d59541; }
  .btn--large {
    font-size: 1rem;
    padding: 0.7rem 1.5rem; }
    @media (min-width: 530px) {
      .btn--large {
        font-size: 1.25rem;
        padding: 1.1rem 1.9rem; } }

.page-section {
  padding: 1.2rem 0; }
  @media (min-width: 530px) {
    .page-section {
      padding: 4.5rem 0; } }
  .page-section--blue {
    background-color: #2f5572;
    color: #fff; }
  .page-section--backgroundImage {
    background-color: #e0e6ef; }
    @media (min-width: 1010px) {
      .page-section--backgroundImage {
        background: url("src/images/testimonials-bg.jpg") top center no-repeat;
        background-size: cover; } }
  .page-section--bPadding {
    padding-bottom: 0; }
    @media (min-width: 1010px) {
      .page-section--bPadding {
        padding-bottom: 1.125rem; } }

.headline {
  font-size: 1.7rem;
  font-weight: 300;
  color: #2f5572; }
  @media (min-width: 530px) {
    .headline {
      font-size: 2.875rem; } }
  .headline__centered {
    text-align: center; }
  .headline--orange {
    color: #d59541; }
  .headline--small {
    font-size: 1.2rem; }
    @media (min-width: 530px) {
      .headline--small {
        font-size: 1.875rem; } }
  .headline--narrow {
    max-width: 500px;
    margin-left: auto;
    margin-right: auto; }
  .headline--lightFont {
    font-weight: 100; }
  .headline--bottomMarginS {
    margin-bottom: 0.5em; }
  .headline--bottomMarginL {
    margin-bottom: 1.6em; }
  .headline strong {
    font-weight: 600; }
  @media (min-width: 800px) {
    .headline--noTopMargin {
      margin-top: 0; } }

.row {
  /* without > div it would be applied to container div, not the div 
       elements that make up the column */
  /*  code for equal card height, only starting atLarge size screens
    cards div use float (see _row) 
    switch to flex box
*/
  /*  
    The large-X are the base-style applied for large screens
    The medium-X (below) are the styles for medium and up
    Some page-section require medium, others large. 
    X is based on 12 column layout, 1/3 = 4
    The modifiers for specific cases 
*/ }
  .row--columnPadding {
    margin-right: -65px; }
  .row--columnPadding > div {
    padding-right: 65px; }
  .row--columnPadding-large {
    margin-right: -100px; }
  .row--columnPadding-large > div {
    padding-right: 100px; }
  .row--columnPadding-small {
    margin-right: -45px; }
  .row--columnPadding-small > div {
    padding-right: 45px; }
  .row--topPadding {
    padding-top: 80px; }
  @media (min-width: 1010px) {
    .row--columnHeight {
      display: flex; } }
  .row--columnHeight > div {
    float: none;
    display: flex; }
  .row::after {
    content: "";
    clear: both;
    display: table; }
  @media (min-width: 1010px) {
    .row__large-4 {
      float: left;
      width: 33.33%; }
    .row__large-4--larger {
      width: 37%; }
    .row__large-8 {
      float: left;
      width: 66.66%; }
    .row__large-8--smaller {
      width: 63%; }
    .row__large-6 {
      float: left;
      width: 50%; } }
  @media (min-width: 800px) {
    .row__medium-4 {
      float: left;
      width: 33.33%; }
    .row__medium-4--larger {
      width: 37%; }
    .row__medium-8 {
      float: left;
      width: 66.66%; }
    .row__medium-8--smaller {
      width: 63%; }
    .row__medium-6 {
      float: left;
      width: 50%; } }

.generic-content p {
  line-height: 1.65;
  margin: 0 0 1.8rem 0;
  font-weight: 300; }
  @media (min-width: 530px) {
    .generic-content p {
      font-size: 1.125rem; } }

.generic-content p a {
  font-weight: 700; }

.section-title {
  font-size: 2.55rem;
  font-weight: 300;
  text-align: center; }
  @media (min-width: 530px) {
    .section-title {
      font-size: 3.75rem; } }
  .section-title strong {
    font-weight: 600; }
  .section-title__icon {
    display: block;
    margin: 0 auto .6rem auto; }
    @media (min-width: 530px) {
      .section-title__icon {
        margin: 0 .6rem 0 0;
        display: inline-block;
        position: relative;
        top: 8px; } }
  .section-title--blue {
    color: #2f5572; }

.feature-item {
  padding-bottom: 2.5rem; }
  @media (min-width: 530px) {
    .feature-item {
      padding-left: 100px;
      position: relative; } }
  .feature-item__icon {
    display: block;
    margin: 0 auto; }
    @media (min-width: 530px) {
      .feature-item__icon {
        position: absolute;
        left: 0; } }
  .feature-item__title {
    font-size: 1.6rem;
    font-weight: 300;
    margin-bottom: 0.8rem;
    margin-top: 0.7rem;
    text-align: center; }
    @media (min-width: 530px) {
      .feature-item__title {
        font-size: 1.875rem;
        margin-top: 1rem;
        text-align: left; } }

.cards {
  background-color: rgba(255, 255, 255, 0.7);
  padding: 0 1.125rem 1px 1.124rem;
  margin-bottom: 8rem;
  /*  
        reduced padding and added margin-bottom for mobile and tablet
        the 1px bottom gives the p something to push up against 
        extra margin-b has to be removed on last card (mobile)
        */ }
  .cards--last-card {
    margin-bottom: 0; }
  @media (min-width: 1010px) {
    .cards {
      padding: 0 1.8rem 1px 1.8rem;
      margin-bottom: 0; } }
  .cards__image {
    position: relative;
    top: -80px;
    border: solid 5px rgba(255, 255, 255, 0.7);
    border-radius: 50%;
    width: 160px;
    height: 160px;
    overflow: hidden;
    margin: 0 auto -80px auto; }
  .cards__title {
    color: #2f5572;
    font-size: 1.5rem;
    font-weight: 600;
    text-align: center;
    margin-bottom: 0; }
  .cards__subtitle {
    color: #d59541;
    font-size: 1.2rem;
    font-weight: 400;
    text-align: center;
    margin: .25rem 0 1rem 0; }

.site-footer {
  background-color: #2f5572;
  color: #fff;
  padding: .5rem 0;
  text-align: center; }
  .site-footer__text {
    display: block;
    margin-bottom: 1rem;
    font-weight: 200; }
    @media (min-width: 800px) {
      .site-footer__text {
        display: inline;
        padding-right: 1.5rem;
        margin-bottom: 0rem; } }

.site-header {
  position: absolute;
  top: 0;
  z-index: 1;
  width: 100%;
  padding: .6rem 0;
  transition: background-color .3s ease-out; }
  @media (min-width: 800px) {
    .site-header {
      background-color: rgba(47, 85, 114, 0.3); } }
  .site-header--expand {
    background-color: rgba(47, 85, 114, 0.55); }
  @media (min-width: 800px) {
    .site-header__btn {
      float: right; } }
  .site-header__logo {
    background-color: #2f5572;
    position: absolute;
    top: 0;
    padding: 1rem 1.75rem;
    left: 50%;
    -webkit-transform: translateX(-50%) scale(0.8);
            transform: translateX(-50%) scale(0.8);
    -webkit-transform-origin: 50% 0;
            transform-origin: 50% 0; }
    @media (min-width: 800px) {
      .site-header__logo {
        left: auto;
        -webkit-transform: translateX(0);
                transform: translateX(0);
        padding: 1.5rem 3rem; } }
  .site-header__logo__seoText {
    font-size: 0; }
  .site-header__menuContent {
    opacity: 0;
    position: relative;
    z-index: -10;
    transition: all .3s ease-out;
    padding-top: 5.625rem;
    text-align: center;
    -webkit-transform: scale(1.2);
            transform: scale(1.2); }
    @media (min-width: 800px) {
      .site-header__menuContent {
        opacity: 1;
        z-index: 1;
        padding-top: 0;
        -webkit-transform: scale(1);
                transform: scale(1); } }
    .site-header__menuContent--visible {
      opacity: 1;
      z-index: 1;
      -webkit-transform: scale(1);
              transform: scale(1); }
  .site-header__menuIcon {
    width: 1.25rem;
    height: 1.1875rem;
    position: absolute;
    top: .6rem;
    right: .6rem;
    z-index: 10; }
    @media (min-width: 800px) {
      .site-header__menuIcon {
        display: none; } }
    .site-header__menuIcon::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      background-color: #FFF;
      width: 1.25rem;
      height: .1875rem;
      -webkit-transform-origin: 0 0;
              transform-origin: 0 0;
      transition: -webkit-transform .3s ease-out;
      transition: transform .3s ease-out;
      transition: transform .3s ease-out, -webkit-transform .3s ease-out; }
    .site-header__menuIcon__middleBar {
      position: absolute;
      top: .5rem;
      left: 0;
      background-color: #FFF;
      width: 1.25rem;
      height: .1875rem;
      transition: all .3s ease-out;
      -webkit-transform-origin: 0 50%;
              transform-origin: 0 50%; }
    .site-header__menuIcon::after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      background-color: #FFF;
      width: 1.25rem;
      height: .1875rem;
      -webkit-transform-origin: 0 100%;
              transform-origin: 0 100%;
      transition: -webkit-transform .3s ease-out;
      transition: transform .3s ease-out;
      transition: transform .3s ease-out, -webkit-transform .3s ease-out; }
    .site-header__menuIcon--close::before {
      -webkit-transform: rotate(45deg) scaleX(1.25);
              transform: rotate(45deg) scaleX(1.25); }
    .site-header__menuIcon--close .site-header__menuIcon__middleBar {
      opacity: 0;
      -webkit-transform: scale(0);
              transform: scale(0); }
    .site-header__menuIcon--close::after {
      -webkit-transform: rotate(-45deg) scaleX(1.25) translateY(1px);
              transform: rotate(-45deg) scaleX(1.25) translateY(1px); }

.primaryNav {
  padding-top: 0.6rem; }
  @media (min-width: 800px) {
    .primaryNav {
      padding-top: 0; } }
  .primaryNav ul {
    padding: 0;
    margin: 0; }
    .primaryNav ul::after {
      content: "";
      clear: both;
      display: table; }
  .primaryNav li {
    display: inline-block;
    list-style: none;
    padding-right: .31rem; }
    @media (min-width: 800px) {
      .primaryNav li {
        padding-right: 1.125rem;
        float: left;
        display: block; } }
  .primaryNav li:last-child {
    padding-right: 0; }
    @media (min-width: 800px) {
      .primaryNav li:last-child {
        padding-right: 1.125rem; } }
  .primaryNav a {
    color: #fff;
    text-decoration: none;
    font-weight: 300;
    display: block;
    padding: .31rem 0.4rem;
    font-size: 0.8rem;
    background-color: rgba(47, 85, 114, 0.5); }
    @media (min-width: 800px) {
      .primaryNav a {
        padding: .75rem 0;
        font-size: 1rem;
        background-color: transparent; } }
  @media (min-width: 800px) {
    .primaryNav--floatRight {
      float: right; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUuc2Nzcy9ub3JtYWxpemUuc2NzcyIsIm1haW4uY3NzIiwiYmFzZS9fZ2xvYmFsLnNjc3MiLCJiYXNlL192YXJpYWJsZXMuc2NzcyIsIm1vZHVsZXMvX3dyYXBwZXIuc2NzcyIsImJhc2UvX21peGlucy5zY3NzIiwibW9kdWxlcy9fbGFyZ2UtaGVyby5zY3NzIiwibW9kdWxlcy9fYnRuLnNjc3MiLCJtb2R1bGVzL19wYWdlLXNlY3Rpb24uc2NzcyIsIm1vZHVsZXMvX2hlYWRsaW5lcy5zY3NzIiwibW9kdWxlcy9fcm93LnNjc3MiLCJtb2R1bGVzL19nZW5lcmljLWNvbnRlbnQuc2NzcyIsIm1vZHVsZXMvX3NlY3Rpb24tdGl0bGUuc2NzcyIsIm1vZHVsZXMvX2ZlYXR1cmUtaXRlbXMuc2NzcyIsIm1vZHVsZXMvX2NhcmRzLnNjc3MiLCJtb2R1bGVzL19zaXRlLWZvb3Rlci5zY3NzIiwibW9kdWxlcy9fc2l0ZS1oZWFkZXIuc2NzcyIsIm1vZHVsZXMvX3ByaW1hcnktbmF2LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUVBQUE7QUFFQTs7OztFQ0dFO0FER0Y7RUFDRSx1QkFBdUI7RUFBRSxNQUFBO0VBQ3pCLDBCQUEwQjtFQUFFLE1BQUE7RUFDNUIsOEJBQThCO0VBQUUsTUFBQSxFQUFPOztBQUd6Qzs7RUNFRTtBREVGO0VBQ0UsU0FBUyxFQUFBOztBQUdYOytFQ0QrRTtBREkvRTs7Ozs7RUNFRTtBREtGOzs7Ozs7Ozs7Ozs7O0VBYUUsY0FBYyxFQUFBOztBQUdoQjs7O0VDRkU7QURPRjs7OztFQUlFLHFCQUFxQjtFQUFFLE1BQUE7RUFDdkIsd0JBQXdCO0VBQUUsTUFBQSxFQUFPOztBQUduQzs7O0VDRkU7QURPRjtFQUNFLGFBQWE7RUFDYixTQUFTLEVBQUE7O0FBR1g7OztFQ0pFO0FBQ0Y7O0VEVUUsYUFBYSxFQUFBOztBQUdmOytFQ1IrRTtBRFcvRTs7RUNSRTtBRFlGO0VBQ0Us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RTtFQUVJLG1CQUFtQixFQUFBO0VaS25CO0lZUEo7TUFLUSxjQUFjLEVBQUEsRUFrRHJCO0VBdkREO0lBU1EsVUFBVTtJQUNWLFNBQVMsRUFBQTtJWlNmO01BQ0UsV0FBVztNQUNYLFdBQVc7TUFDWCxjQUFjLEVBQUE7RVl0QmxCO0lBZVEscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixxQkFBcUIsRUFBQTtJWlZ6QjtNWVBKO1FBb0JZLHVCQUF1QjtRQUN2QixXQUFXO1FBQ1gsY0FBYyxFQUFBLEVBRXJCO0VBeEJMO0lBMkJRLGdCQUFnQixFQUFBO0lacEJwQjtNWVBKO1FBOEJZLHVCQUF1QixFQUFBLEVBRTlCO0VBaENMO0lBbUNRLFdBQVc7SUFDWCxxQkFBcUI7SUFDckIsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxzQkFBc0I7SUFDdEIsaUJBQWlCO0lBQ2pCLHdDZHpDVSxFQUFBO0lFT2Q7TVlQSjtRQTRDWSxpQkFBaUI7UUFDakIsZUFBZTtRQUNmLDZCQUE2QixFQUFBLEVBRXBDO0VaekNEO0lZMkNBO01BRVEsWUFBWSxFQUFBLEVBRW5CIiwiZmlsZSI6Im1haW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vcm1hbGl6ZS5zY3NzIHYwLjEuMCB8IE1JVCBMaWNlbnNlIHwgYmFzZWQgb24gZ2l0LmlvL25vcm1hbGl6ZSAqL1xuXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuXG5odG1sIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGFueSBIVE1MNSBlbGVtZW50IGluIElFIDgvOS5cbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBgZGV0YWlsc2Agb3IgYHN1bW1hcnlgIGluIElFIDEwLzExXG4gKiBhbmQgRmlyZWZveC5cbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBgbWFpbmAgaW4gSUUgMTEuXG4gKi9cblxuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tYWluLFxubWVudSxcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDgvOS5cbiAqIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAyICovXG59XG5cbi8qKlxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gKi9cblxuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS8xMC5cbiAqIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSA4LzkvMTEsIFNhZmFyaSwgYW5kIEZpcmVmb3ggPCAyMi5cbiAqL1xuXG5baGlkZGVuXSxcbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogTGlua3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cblxuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4vKipcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmU6IDA7XG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAvMTEsIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQ7XG59XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsZSBzZXQgdG8gYGJvbGRlcmAgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cblxuZGZuIHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgdmFyaWFibGUgYGgxYCBmb250LXNpemUgYW5kIG1hcmdpbiB3aXRoaW4gYHNlY3Rpb25gIGFuZCBgYXJ0aWNsZWBcbiAqIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKi9cblxubWFyayB7XG4gIGJhY2tncm91bmQ6ICNmZjA7XG4gIGNvbG9yOiAjMDAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtO1xufVxuXG5zdWIge1xuICBib3R0b206IC0wLjI1ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA4LzkvMTAuXG4gKi9cblxuaW1nIHtcbiAgYm9yZGVyOiAwO1xufVxuXG4vKipcbiAqIENvcnJlY3Qgb3ZlcmZsb3cgbm90IGhpZGRlbiBpbiBJRSA5LzEwLzExLlxuICovXG5cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaS5cbiAqL1xuXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4O1xufVxuXG4vKipcbiAqIEFkZHJlc3MgZGlmZmVyZW5jZXMgYmV0d2VlbiBGaXJlZm94IGFuZCBvdGhlciBicm93c2Vycy5cbiAqL1xuXG5ociB7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBoZWlnaHQ6IDA7XG59XG5cbi8qKlxuICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxucHJlIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogQWRkcmVzcyBvZGQgYGVtYC11bml0IGZvbnQgc2l6ZSByZW5kZXJpbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmNvZGUsXG5rYmQsXG5wcmUsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICBmb250LXNpemU6IDFlbTtcbn1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAqL1xuXG4vKipcbiAqIDEuIENvcnJlY3QgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZC5cbiAqICAgIEtub3duIGlzc3VlOiBhZmZlY3RzIGNvbG9yIG9mIGRpc2FibGVkIGVsZW1lbnRzLlxuICogMi4gQ29ycmVjdCBmb250IHByb3BlcnRpZXMgbm90IGJlaW5nIGluaGVyaXRlZC5cbiAqIDMuIEFkZHJlc3MgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGNvbG9yOiBpbmhlcml0OyAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cbiAgbWFyZ2luOiAwOyAvKiAzICovXG59XG5cbi8qKlxuICogQWRkcmVzcyBgb3ZlcmZsb3dgIHNldCB0byBgaGlkZGVuYCBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cblxuYnV0dG9uIHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG59XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxuICogQWxsIG90aGVyIGZvcm0gY29udHJvbCBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBgdGV4dC10cmFuc2Zvcm1gIHZhbHVlcy5cbiAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCwgSUUgOC85LzEwLzExLCBhbmQgT3BlcmEuXG4gKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3guXG4gKi9cblxuYnV0dG9uLFxuc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbi8qKlxuICogMS4gQXZvaWQgdGhlIFdlYktpdCBidWcgaW4gQW5kcm9pZCA0LjAuKiB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2BcbiAqICAgIGFuZCBgdmlkZW9gIGNvbnRyb2xzLlxuICogMi4gQ29ycmVjdCBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIGBpbnB1dGAgdHlwZXMgaW4gaU9TLlxuICogMy4gSW1wcm92ZSB1c2FiaWxpdHkgYW5kIGNvbnNpc3RlbmN5IG9mIGN1cnNvciBzdHlsZSBiZXR3ZWVuIGltYWdlLXR5cGVcbiAqICAgIGBpbnB1dGAgYW5kIG90aGVycy5cbiAqL1xuXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIC8qIDEgKi9cbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMiAqL1xuICBjdXJzb3I6IHBvaW50ZXI7IC8qIDMgKi9cbn1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5cbmJ1dHRvbltkaXNhYmxlZF0sXG5odG1sIGlucHV0W2Rpc2FibGVkXSB7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gKi9cblxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBGaXJlZm94IDQrIHNldHRpbmcgYGxpbmUtaGVpZ2h0YCBvbiBgaW5wdXRgIHVzaW5nIGAhaW1wb3J0YW50YCBpblxuICogdGhlIFVBIHN0eWxlc2hlZXQuXG4gKi9cblxuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xufVxuXG4vKipcbiAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgZG9uJ3QgYXR0ZW1wdCB0byBzdHlsZSB0aGVzZSBlbGVtZW50cy5cbiAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gKi9cblxuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLFxuaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cbiAqIGBmb250LXNpemVgIHZhbHVlcyBvZiB0aGUgYGlucHV0YCwgaXQgY2F1c2VzIHRoZSBjdXJzb3Igc3R5bGUgb2YgdGhlXG4gKiBkZWNyZW1lbnQgYnV0dG9uIHRvIGNoYW5nZSBmcm9tIGBkZWZhdWx0YCB0byBgdGV4dGAuXG4gKi9cblxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKiAyLiBBZGRyZXNzIGBib3gtc2l6aW5nYCBzZXQgdG8gYGJvcmRlci1ib3hgIGluIFNhZmFyaSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMiAqL1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXG4gKi9cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LzEwLzExLlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5cbmxlZ2VuZCB7XG4gIGJvcmRlcjogMDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS8xMC8xMS5cbiAqL1xuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIERvbid0IGluaGVyaXQgdGhlIGBmb250LXdlaWdodGAgKGFwcGxpZWQgYnkgYSBydWxlIGFib3ZlKS5cbiAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICovXG5cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHMuXG4gKi9cblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxudGQsXG50aCB7XG4gIHBhZGRpbmc6IDA7XG59XG4iLCIvKiEgbm9ybWFsaXplLnNjc3MgdjAuMS4wIHwgTUlUIExpY2Vuc2UgfCBiYXNlZCBvbiBnaXQuaW8vbm9ybWFsaXplICovXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuaHRtbCB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5ib2R5IHtcbiAgbWFyZ2luOiAwOyB9XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBhbnkgSFRNTDUgZWxlbWVudCBpbiBJRSA4LzkuXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYGRldGFpbHNgIG9yIGBzdW1tYXJ5YCBpbiBJRSAxMC8xMVxuICogYW5kIEZpcmVmb3guXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYG1haW5gIGluIElFIDExLlxuICovXG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm1haW4sXG5tZW51LFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuXG4gKiAyLiBOb3JtYWxpemUgdmVydGljYWwgYWxpZ25tZW50IG9mIGBwcm9ncmVzc2AgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXG4gKi9cbmF1ZGlvLFxuY2FudmFzLFxucHJvZ3Jlc3MsXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgLyogMSAqL1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFByZXZlbnQgbW9kZXJuIGJyb3dzZXJzIGZyb20gZGlzcGxheWluZyBgYXVkaW9gIHdpdGhvdXQgY29udHJvbHMuXG4gKiBSZW1vdmUgZXhjZXNzIGhlaWdodCBpbiBpT1MgNSBkZXZpY2VzLlxuICovXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXG4gKiBBZGRyZXNzIGBbaGlkZGVuXWAgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAuXG4gKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUgOC85LzExLCBTYWZhcmksIGFuZCBGaXJlZm94IDwgMjIuXG4gKi9cbltoaWRkZW5dLFxudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi8qIExpbmtzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XG5cbi8qKlxuICogSW1wcm92ZSByZWFkYWJpbGl0eSB3aGVuIGZvY3VzZWQgYW5kIGFsc28gbW91c2UgaG92ZXJlZCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmU6IDA7IH1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAvMTEsIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkOyB9XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsZSBzZXQgdG8gYGJvbGRlcmAgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cbmRmbiB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuXG4vKipcbiAqIEFkZHJlc3MgdmFyaWFibGUgYGgxYCBmb250LXNpemUgYW5kIG1hcmdpbiB3aXRoaW4gYHNlY3Rpb25gIGFuZCBgYXJ0aWNsZWBcbiAqIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDsgfVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKi9cbm1hcmsge1xuICBiYWNrZ3JvdW5kOiAjZmYwO1xuICBjb2xvcjogIzAwMDsgfVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlOyB9XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDgvOS8xMC5cbiAqL1xuaW1nIHtcbiAgYm9yZGVyOiAwOyB9XG5cbi8qKlxuICogQ29ycmVjdCBvdmVyZmxvdyBub3QgaGlkZGVuIGluIElFIDkvMTAvMTEuXG4gKi9cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaS5cbiAqL1xuZmlndXJlIHtcbiAgbWFyZ2luOiAxZW0gNDBweDsgfVxuXG4vKipcbiAqIEFkZHJlc3MgZGlmZmVyZW5jZXMgYmV0d2VlbiBGaXJlZm94IGFuZCBvdGhlciBicm93c2Vycy5cbiAqL1xuaHIge1xuICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgaGVpZ2h0OiAwOyB9XG5cbi8qKlxuICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnByZSB7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbi8qKlxuICogQWRkcmVzcyBvZGQgYGVtYC11bml0IGZvbnQgc2l6ZSByZW5kZXJpbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5jb2RlLFxua2JkLFxucHJlLFxuc2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgZm9udC1zaXplOiAxZW07IH1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIEtub3duIGxpbWl0YXRpb246IGJ5IGRlZmF1bHQsIENocm9tZSBhbmQgU2FmYXJpIG9uIE9TIFggYWxsb3cgdmVyeSBsaW1pdGVkXG4gKiBzdHlsaW5nIG9mIGBzZWxlY3RgLCB1bmxlc3MgYSBgYm9yZGVyYCBwcm9wZXJ0eSBpcyBzZXQuXG4gKi9cbi8qKlxuICogMS4gQ29ycmVjdCBjb2xvciBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogICAgS25vd24gaXNzdWU6IGFmZmVjdHMgY29sb3Igb2YgZGlzYWJsZWQgZWxlbWVudHMuXG4gKiAyLiBDb3JyZWN0IGZvbnQgcHJvcGVydGllcyBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogMy4gQWRkcmVzcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGNvbG9yOiBpbmhlcml0O1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgbWFyZ2luOiAwO1xuICAvKiAzICovIH1cblxuLyoqXG4gKiBBZGRyZXNzIGBvdmVyZmxvd2Agc2V0IHRvIGBoaWRkZW5gIGluIElFIDgvOS8xMC8xMS5cbiAqL1xuYnV0dG9uIHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4gKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LCBJRSA4LzkvMTAvMTEsIGFuZCBPcGVyYS5cbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveC5cbiAqL1xuYnV0dG9uLFxuc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuLyoqXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxuICogICAgYW5kIGB2aWRlb2AgY29udHJvbHMuXG4gKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gKiAzLiBJbXByb3ZlIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxuICogICAgYGlucHV0YCBhbmQgb3RoZXJzLlxuICovXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIDIgKi9cbiAgY3Vyc29yOiBwb2ludGVyO1xuICAvKiAzICovIH1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5idXR0b25bZGlzYWJsZWRdLFxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7IH1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gKi9cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcbmlucHV0OjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyOiAwO1xuICBwYWRkaW5nOiAwOyB9XG5cbi8qKlxuICogQWRkcmVzcyBGaXJlZm94IDQrIHNldHRpbmcgYGxpbmUtaGVpZ2h0YCBvbiBgaW5wdXRgIHVzaW5nIGAhaW1wb3J0YW50YCBpblxuICogdGhlIFVBIHN0eWxlc2hlZXQuXG4gKi9cbmlucHV0IHtcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDsgfVxuXG4vKipcbiAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgZG9uJ3QgYXR0ZW1wdCB0byBzdHlsZSB0aGVzZSBlbGVtZW50cy5cbiAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gKi9cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cbiAqIGBmb250LXNpemVgIHZhbHVlcyBvZiB0aGUgYGlucHV0YCwgaXQgY2F1c2VzIHRoZSBjdXJzb3Igc3R5bGUgb2YgdGhlXG4gKiBkZWNyZW1lbnQgYnV0dG9uIHRvIGNoYW5nZSBmcm9tIGBkZWZhdWx0YCB0byBgdGV4dGAuXG4gKi9cbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgaGVpZ2h0OiBhdXRvOyB9XG5cbi8qKlxuICogMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKiAyLiBBZGRyZXNzIGBib3gtc2l6aW5nYCBzZXQgdG8gYGJvcmRlci1ib3hgIGluIFNhZmFyaSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC8qIDIgKi9cbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IH1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cbiAqL1xuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IH1cblxuLyoqXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXG4gKi9cbmZpZWxkc2V0IHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcbiAgbWFyZ2luOiAwIDJweDtcbiAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LzEwLzExLlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5sZWdlbmQge1xuICBib3JkZXI6IDA7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS8xMC8xMS5cbiAqL1xudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bzsgfVxuXG4vKipcbiAqIERvbid0IGluaGVyaXQgdGhlIGBmb250LXdlaWdodGAgKGFwcGxpZWQgYnkgYSBydWxlIGFib3ZlKS5cbiAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICovXG5vcHRncm91cCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICovXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbnRkLFxudGgge1xuICBwYWRkaW5nOiAwOyB9XG5cbmJvZHkge1xuICBmb250LWZhbWlseTogJ3JvYm90bywgc2Fucy1zZXJpZic7XG4gIGNvbG9yOiAjMzMzOyB9XG5cbmltZyB7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvOyB9XG5cbioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG5cbmEge1xuICBjb2xvcjogI2Q1OTU0MTsgfVxuXG4ud3JhcHBlciB7XG4gIHBhZGRpbmctbGVmdDogMS4xMjVyZW07XG4gIHBhZGRpbmctcmlnaHQ6IDEuMTI1cmVtO1xuICBtYXgtd2lkdGg6IDEyMzZweDtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuICAud3JhcHBlci0tbWVkaXVtIHtcbiAgICBtYXgtd2lkdGg6IDk3NnB4OyB9XG4gIC53cmFwcGVyLS1tb2JpbGUge1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMTBweCkge1xuICAgICAgLndyYXBwZXItLW1vYmlsZSB7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMS4xMjVyZW07XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDEuMTI1cmVtOyB9IH1cbiAgLndyYXBwZXItLWJvdHRvbU1hcmdpbiB7XG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA1MzBweCkge1xuICAgICAgLndyYXBwZXItLWJvdHRvbU1hcmdpbiB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDMuODc1cmVtOyB9IH1cbiAgLndyYXBwZXIgLndyYXBwZXIge1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwOyB9XG5cbi5sYXJnZS1oZXJvIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkICMyZjU1NzI7IH1cbiAgLmxhcmdlLWhlcm9fX3RleHQtY29udGVudCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNTAlO1xuICAgIHBhZGRpbmctdG9wOiA2MHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBsZWZ0OiAwO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7IH1cbiAgLmxhcmdlLWhlcm9fX3RpdGxlIHtcbiAgICBmb250LXNpemU6IDIuNHJlbTtcbiAgICBjb2xvcjogIzJmNTU3MjtcbiAgICBmb250LXdlaWdodDogMzAwO1xuICAgIG1hcmdpbjogMDsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA1MzBweCkge1xuICAgICAgLmxhcmdlLWhlcm9fX3RpdGxlIHtcbiAgICAgICAgZm9udC1zaXplOiA0LjhyZW07IH0gfVxuICAubGFyZ2UtaGVyb19fc3VidGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgIGNvbG9yOiAjMmY1NTcyO1xuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG4gICAgbWFyZ2luOiAwOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDUzMHB4KSB7XG4gICAgICAubGFyZ2UtaGVyb19fc3VidGl0bGUge1xuICAgICAgICBmb250LXNpemU6IDIuOXJlbTsgfSB9XG4gIC5sYXJnZS1oZXJvX190ZXh0IHtcbiAgICBjb2xvcjogI0ZGRjtcbiAgICBmb250LXNpemU6IDEuMXJlbTtcbiAgICBmb250LXdlaWdodDogMTAwO1xuICAgIHRleHQtc2hhZG93OiAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgIG1heC13aWR0aDogMzByZW07XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDUzMHB4KSB7XG4gICAgICAubGFyZ2UtaGVyb19fdGV4dCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMS44NzVyZW07IH0gfVxuICAubGFyZ2UtaGVyb19faW1hZ2Uge1xuICAgIGRpc3BsYXk6IGJsb2NrOyB9XG5cbi5idG4ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmY1NTcyO1xuICBjb2xvcjogI0ZGRjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBwYWRkaW5nOiAuNzVyZW0gMS4ycmVtO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cbiAgLmJ0bi0tb3JhbmdlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDU5NTQxOyB9XG4gIC5idG4tLWxhcmdlIHtcbiAgICBmb250LXNpemU6IDFyZW07XG4gICAgcGFkZGluZzogMC43cmVtIDEuNXJlbTsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA1MzBweCkge1xuICAgICAgLmJ0bi0tbGFyZ2Uge1xuICAgICAgICBmb250LXNpemU6IDEuMjVyZW07XG4gICAgICAgIHBhZGRpbmc6IDEuMXJlbSAxLjlyZW07IH0gfVxuXG4ucGFnZS1zZWN0aW9uIHtcbiAgcGFkZGluZzogMS4ycmVtIDA7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDUzMHB4KSB7XG4gICAgLnBhZ2Utc2VjdGlvbiB7XG4gICAgICBwYWRkaW5nOiA0LjVyZW0gMDsgfSB9XG4gIC5wYWdlLXNlY3Rpb24tLWJsdWUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyZjU1NzI7XG4gICAgY29sb3I6ICNmZmY7IH1cbiAgLnBhZ2Utc2VjdGlvbi0tYmFja2dyb3VuZEltYWdlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBlNmVmOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMTBweCkge1xuICAgICAgLnBhZ2Utc2VjdGlvbi0tYmFja2dyb3VuZEltYWdlIHtcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKFwic3JjL2ltYWdlcy90ZXN0aW1vbmlhbHMtYmcuanBnXCIpIHRvcCBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyB9IH1cbiAgLnBhZ2Utc2VjdGlvbi0tYlBhZGRpbmcge1xuICAgIHBhZGRpbmctYm90dG9tOiAwOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDEwMTBweCkge1xuICAgICAgLnBhZ2Utc2VjdGlvbi0tYlBhZGRpbmcge1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMS4xMjVyZW07IH0gfVxuXG4uaGVhZGxpbmUge1xuICBmb250LXNpemU6IDEuN3JlbTtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgY29sb3I6ICMyZjU1NzI7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDUzMHB4KSB7XG4gICAgLmhlYWRsaW5lIHtcbiAgICAgIGZvbnQtc2l6ZTogMi44NzVyZW07IH0gfVxuICAuaGVhZGxpbmVfX2NlbnRlcmVkIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cbiAgLmhlYWRsaW5lLS1vcmFuZ2Uge1xuICAgIGNvbG9yOiAjZDU5NTQxOyB9XG4gIC5oZWFkbGluZS0tc21hbGwge1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDUzMHB4KSB7XG4gICAgICAuaGVhZGxpbmUtLXNtYWxsIHtcbiAgICAgICAgZm9udC1zaXplOiAxLjg3NXJlbTsgfSB9XG4gIC5oZWFkbGluZS0tbmFycm93IHtcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bzsgfVxuICAuaGVhZGxpbmUtLWxpZ2h0Rm9udCB7XG4gICAgZm9udC13ZWlnaHQ6IDEwMDsgfVxuICAuaGVhZGxpbmUtLWJvdHRvbU1hcmdpblMge1xuICAgIG1hcmdpbi1ib3R0b206IDAuNWVtOyB9XG4gIC5oZWFkbGluZS0tYm90dG9tTWFyZ2luTCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMS42ZW07IH1cbiAgLmhlYWRsaW5lIHN0cm9uZyB7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIHtcbiAgICAuaGVhZGxpbmUtLW5vVG9wTWFyZ2luIHtcbiAgICAgIG1hcmdpbi10b3A6IDA7IH0gfVxuXG4ucm93IHtcbiAgLyogd2l0aG91dCA+IGRpdiBpdCB3b3VsZCBiZSBhcHBsaWVkIHRvIGNvbnRhaW5lciBkaXYsIG5vdCB0aGUgZGl2IFxyXG4gICAgICAgZWxlbWVudHMgdGhhdCBtYWtlIHVwIHRoZSBjb2x1bW4gKi9cbiAgLyogIGNvZGUgZm9yIGVxdWFsIGNhcmQgaGVpZ2h0LCBvbmx5IHN0YXJ0aW5nIGF0TGFyZ2Ugc2l6ZSBzY3JlZW5zXHJcbiAgICBjYXJkcyBkaXYgdXNlIGZsb2F0IChzZWUgX3JvdykgXHJcbiAgICBzd2l0Y2ggdG8gZmxleCBib3hcclxuKi9cbiAgLyogIFxyXG4gICAgVGhlIGxhcmdlLVggYXJlIHRoZSBiYXNlLXN0eWxlIGFwcGxpZWQgZm9yIGxhcmdlIHNjcmVlbnNcclxuICAgIFRoZSBtZWRpdW0tWCAoYmVsb3cpIGFyZSB0aGUgc3R5bGVzIGZvciBtZWRpdW0gYW5kIHVwXHJcbiAgICBTb21lIHBhZ2Utc2VjdGlvbiByZXF1aXJlIG1lZGl1bSwgb3RoZXJzIGxhcmdlLiBcclxuICAgIFggaXMgYmFzZWQgb24gMTIgY29sdW1uIGxheW91dCwgMS8zID0gNFxyXG4gICAgVGhlIG1vZGlmaWVycyBmb3Igc3BlY2lmaWMgY2FzZXMgXHJcbiovIH1cbiAgLnJvdy0tY29sdW1uUGFkZGluZyB7XG4gICAgbWFyZ2luLXJpZ2h0OiAtNjVweDsgfVxuICAucm93LS1jb2x1bW5QYWRkaW5nID4gZGl2IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiA2NXB4OyB9XG4gIC5yb3ctLWNvbHVtblBhZGRpbmctbGFyZ2Uge1xuICAgIG1hcmdpbi1yaWdodDogLTEwMHB4OyB9XG4gIC5yb3ctLWNvbHVtblBhZGRpbmctbGFyZ2UgPiBkaXYge1xuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4OyB9XG4gIC5yb3ctLWNvbHVtblBhZGRpbmctc21hbGwge1xuICAgIG1hcmdpbi1yaWdodDogLTQ1cHg7IH1cbiAgLnJvdy0tY29sdW1uUGFkZGluZy1zbWFsbCA+IGRpdiB7XG4gICAgcGFkZGluZy1yaWdodDogNDVweDsgfVxuICAucm93LS10b3BQYWRkaW5nIHtcbiAgICBwYWRkaW5nLXRvcDogODBweDsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogMTAxMHB4KSB7XG4gICAgLnJvdy0tY29sdW1uSGVpZ2h0IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7IH0gfVxuICAucm93LS1jb2x1bW5IZWlnaHQgPiBkaXYge1xuICAgIGZsb2F0OiBub25lO1xuICAgIGRpc3BsYXk6IGZsZXg7IH1cbiAgLnJvdzo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgY2xlYXI6IGJvdGg7XG4gICAgZGlzcGxheTogdGFibGU7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDEwMTBweCkge1xuICAgIC5yb3dfX2xhcmdlLTQge1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICB3aWR0aDogMzMuMzMlOyB9XG4gICAgLnJvd19fbGFyZ2UtNC0tbGFyZ2VyIHtcbiAgICAgIHdpZHRoOiAzNyU7IH1cbiAgICAucm93X19sYXJnZS04IHtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgd2lkdGg6IDY2LjY2JTsgfVxuICAgIC5yb3dfX2xhcmdlLTgtLXNtYWxsZXIge1xuICAgICAgd2lkdGg6IDYzJTsgfVxuICAgIC5yb3dfX2xhcmdlLTYge1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICB3aWR0aDogNTAlOyB9IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XG4gICAgLnJvd19fbWVkaXVtLTQge1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICB3aWR0aDogMzMuMzMlOyB9XG4gICAgLnJvd19fbWVkaXVtLTQtLWxhcmdlciB7XG4gICAgICB3aWR0aDogMzclOyB9XG4gICAgLnJvd19fbWVkaXVtLTgge1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICB3aWR0aDogNjYuNjYlOyB9XG4gICAgLnJvd19fbWVkaXVtLTgtLXNtYWxsZXIge1xuICAgICAgd2lkdGg6IDYzJTsgfVxuICAgIC5yb3dfX21lZGl1bS02IHtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgd2lkdGg6IDUwJTsgfSB9XG5cbi5nZW5lcmljLWNvbnRlbnQgcCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjY1O1xuICBtYXJnaW46IDAgMCAxLjhyZW0gMDtcbiAgZm9udC13ZWlnaHQ6IDMwMDsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNTMwcHgpIHtcbiAgICAuZ2VuZXJpYy1jb250ZW50IHAge1xuICAgICAgZm9udC1zaXplOiAxLjEyNXJlbTsgfSB9XG5cbi5nZW5lcmljLWNvbnRlbnQgcCBhIHtcbiAgZm9udC13ZWlnaHQ6IDcwMDsgfVxuXG4uc2VjdGlvbi10aXRsZSB7XG4gIGZvbnQtc2l6ZTogMi41NXJlbTtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA1MzBweCkge1xuICAgIC5zZWN0aW9uLXRpdGxlIHtcbiAgICAgIGZvbnQtc2l6ZTogMy43NXJlbTsgfSB9XG4gIC5zZWN0aW9uLXRpdGxlIHN0cm9uZyB7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDsgfVxuICAuc2VjdGlvbi10aXRsZV9faWNvbiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgbWFyZ2luOiAwIGF1dG8gLjZyZW0gYXV0bzsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA1MzBweCkge1xuICAgICAgLnNlY3Rpb24tdGl0bGVfX2ljb24ge1xuICAgICAgICBtYXJnaW46IDAgLjZyZW0gMCAwO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdG9wOiA4cHg7IH0gfVxuICAuc2VjdGlvbi10aXRsZS0tYmx1ZSB7XG4gICAgY29sb3I6ICMyZjU1NzI7IH1cblxuLmZlYXR1cmUtaXRlbSB7XG4gIHBhZGRpbmctYm90dG9tOiAyLjVyZW07IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDUzMHB4KSB7XG4gICAgLmZlYXR1cmUtaXRlbSB7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9IH1cbiAgLmZlYXR1cmUtaXRlbV9faWNvbiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgbWFyZ2luOiAwIGF1dG87IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNTMwcHgpIHtcbiAgICAgIC5mZWF0dXJlLWl0ZW1fX2ljb24ge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IDA7IH0gfVxuICAuZmVhdHVyZS1pdGVtX190aXRsZSB7XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjhyZW07XG4gICAgbWFyZ2luLXRvcDogMC43cmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA1MzBweCkge1xuICAgICAgLmZlYXR1cmUtaXRlbV9fdGl0bGUge1xuICAgICAgICBmb250LXNpemU6IDEuODc1cmVtO1xuICAgICAgICBtYXJnaW4tdG9wOiAxcmVtO1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OyB9IH1cblxuLmNhcmRzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpO1xuICBwYWRkaW5nOiAwIDEuMTI1cmVtIDFweCAxLjEyNHJlbTtcbiAgbWFyZ2luLWJvdHRvbTogOHJlbTtcbiAgLyogIFxyXG4gICAgICAgIHJlZHVjZWQgcGFkZGluZyBhbmQgYWRkZWQgbWFyZ2luLWJvdHRvbSBmb3IgbW9iaWxlIGFuZCB0YWJsZXRcclxuICAgICAgICB0aGUgMXB4IGJvdHRvbSBnaXZlcyB0aGUgcCBzb21ldGhpbmcgdG8gcHVzaCB1cCBhZ2FpbnN0IFxyXG4gICAgICAgIGV4dHJhIG1hcmdpbi1iIGhhcyB0byBiZSByZW1vdmVkIG9uIGxhc3QgY2FyZCAobW9iaWxlKVxyXG4gICAgICAgICovIH1cbiAgLmNhcmRzLS1sYXN0LWNhcmQge1xuICAgIG1hcmdpbi1ib3R0b206IDA7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDEwMTBweCkge1xuICAgIC5jYXJkcyB7XG4gICAgICBwYWRkaW5nOiAwIDEuOHJlbSAxcHggMS44cmVtO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfSB9XG4gIC5jYXJkc19faW1hZ2Uge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0b3A6IC04MHB4O1xuICAgIGJvcmRlcjogc29saWQgNXB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgd2lkdGg6IDE2MHB4O1xuICAgIGhlaWdodDogMTYwcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBtYXJnaW46IDAgYXV0byAtODBweCBhdXRvOyB9XG4gIC5jYXJkc19fdGl0bGUge1xuICAgIGNvbG9yOiAjMmY1NTcyO1xuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDA7IH1cbiAgLmNhcmRzX19zdWJ0aXRsZSB7XG4gICAgY29sb3I6ICNkNTk1NDE7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAuMjVyZW0gMCAxcmVtIDA7IH1cblxuLnNpdGUtZm9vdGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJmNTU3MjtcbiAgY29sb3I6ICNmZmY7XG4gIHBhZGRpbmc6IC41cmVtIDA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxuICAuc2l0ZS1mb290ZXJfX3RleHQge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgZm9udC13ZWlnaHQ6IDIwMDsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xuICAgICAgLnNpdGUtZm9vdGVyX190ZXh0IHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW07XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDByZW07IH0gfVxuXG4uc2l0ZS1oZWFkZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgei1pbmRleDogMTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IC42cmVtIDA7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgLjNzIGVhc2Utb3V0OyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xuICAgIC5zaXRlLWhlYWRlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDQ3LCA4NSwgMTE0LCAwLjMpOyB9IH1cbiAgLnNpdGUtaGVhZGVyLS1leHBhbmQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDcsIDg1LCAxMTQsIDAuNTUpOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xuICAgIC5zaXRlLWhlYWRlcl9fYnRuIHtcbiAgICAgIGZsb2F0OiByaWdodDsgfSB9XG4gIC5zaXRlLWhlYWRlcl9fbG9nbyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJmNTU3MjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHBhZGRpbmc6IDFyZW0gMS43NXJlbTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHNjYWxlKDAuOCk7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDA7IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIHtcbiAgICAgIC5zaXRlLWhlYWRlcl9fbG9nbyB7XG4gICAgICAgIGxlZnQ6IGF1dG87XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICAgICAgcGFkZGluZzogMS41cmVtIDNyZW07IH0gfVxuICAuc2l0ZS1oZWFkZXJfX2xvZ29fX3Nlb1RleHQge1xuICAgIGZvbnQtc2l6ZTogMDsgfVxuICAuc2l0ZS1oZWFkZXJfX21lbnVDb250ZW50IHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB6LWluZGV4OiAtMTA7XG4gICAgdHJhbnNpdGlvbjogYWxsIC4zcyBlYXNlLW91dDtcbiAgICBwYWRkaW5nLXRvcDogNS42MjVyZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xuICAgICAgLnNpdGUtaGVhZGVyX19tZW51Q29udGVudCB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIHBhZGRpbmctdG9wOiAwO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpOyB9IH1cbiAgICAuc2l0ZS1oZWFkZXJfX21lbnVDb250ZW50LS12aXNpYmxlIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB6LWluZGV4OiAxO1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTsgfVxuICAuc2l0ZS1oZWFkZXJfX21lbnVJY29uIHtcbiAgICB3aWR0aDogMS4yNXJlbTtcbiAgICBoZWlnaHQ6IDEuMTg3NXJlbTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAuNnJlbTtcbiAgICByaWdodDogLjZyZW07XG4gICAgei1pbmRleDogMTA7IH1cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIHtcbiAgICAgIC5zaXRlLWhlYWRlcl9fbWVudUljb24ge1xuICAgICAgICBkaXNwbGF5OiBub25lOyB9IH1cbiAgICAuc2l0ZS1oZWFkZXJfX21lbnVJY29uOjpiZWZvcmUge1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogMDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGO1xuICAgICAgd2lkdGg6IDEuMjVyZW07XG4gICAgICBoZWlnaHQ6IC4xODc1cmVtO1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4zcyBlYXNlLW91dDsgfVxuICAgIC5zaXRlLWhlYWRlcl9fbWVudUljb25fX21pZGRsZUJhciB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IC41cmVtO1xuICAgICAgbGVmdDogMDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkY7XG4gICAgICB3aWR0aDogMS4yNXJlbTtcbiAgICAgIGhlaWdodDogLjE4NzVyZW07XG4gICAgICB0cmFuc2l0aW9uOiBhbGwgLjNzIGVhc2Utb3V0O1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCA1MCU7IH1cbiAgICAuc2l0ZS1oZWFkZXJfX21lbnVJY29uOjphZnRlciB7XG4gICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkY7XG4gICAgICB3aWR0aDogMS4yNXJlbTtcbiAgICAgIGhlaWdodDogLjE4NzVyZW07XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDEwMCU7XG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjNzIGVhc2Utb3V0OyB9XG4gICAgLnNpdGUtaGVhZGVyX19tZW51SWNvbi0tY2xvc2U6OmJlZm9yZSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgc2NhbGVYKDEuMjUpOyB9XG4gICAgLnNpdGUtaGVhZGVyX19tZW51SWNvbi0tY2xvc2UgLnNpdGUtaGVhZGVyX19tZW51SWNvbl9fbWlkZGxlQmFyIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB0cmFuc2Zvcm06IHNjYWxlKDApOyB9XG4gICAgLnNpdGUtaGVhZGVyX19tZW51SWNvbi0tY2xvc2U6OmFmdGVyIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZykgc2NhbGVYKDEuMjUpIHRyYW5zbGF0ZVkoMXB4KTsgfVxuXG4ucHJpbWFyeU5hdiB7XG4gIHBhZGRpbmctdG9wOiAwLjZyZW07IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XG4gICAgLnByaW1hcnlOYXYge1xuICAgICAgcGFkZGluZy10b3A6IDA7IH0gfVxuICAucHJpbWFyeU5hdiB1bCB7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7IH1cbiAgICAucHJpbWFyeU5hdiB1bDo6YWZ0ZXIge1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIGNsZWFyOiBib3RoO1xuICAgICAgZGlzcGxheTogdGFibGU7IH1cbiAgLnByaW1hcnlOYXYgbGkge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIHBhZGRpbmctcmlnaHQ6IC4zMXJlbTsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xuICAgICAgLnByaW1hcnlOYXYgbGkge1xuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxLjEyNXJlbTtcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrOyB9IH1cbiAgLnByaW1hcnlOYXYgbGk6bGFzdC1jaGlsZCB7XG4gICAgcGFkZGluZy1yaWdodDogMDsgfVxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkge1xuICAgICAgLnByaW1hcnlOYXYgbGk6bGFzdC1jaGlsZCB7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDEuMTI1cmVtOyB9IH1cbiAgLnByaW1hcnlOYXYgYSB7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcGFkZGluZzogLjMxcmVtIDAuNHJlbTtcbiAgICBmb250LXNpemU6IDAuOHJlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDQ3LCA4NSwgMTE0LCAwLjUpOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XG4gICAgICAucHJpbWFyeU5hdiBhIHtcbiAgICAgICAgcGFkZGluZzogLjc1cmVtIDA7XG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH0gfVxuICBAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIHtcbiAgICAucHJpbWFyeU5hdi0tZmxvYXRSaWdodCB7XG4gICAgICBmbG9hdDogcmlnaHQ7IH0gfVxuIiwiYm9keSB7XHJcbiAgICBmb250LWZhbWlseTogJ3JvYm90bywgc2Fucy1zZXJpZic7XHJcbiAgICBjb2xvcjogIzMzMztcclxufSBcclxuXHJcbmltZyB7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7ICAgIC8vIHRoaXMgYXZvaWRzIGhvcml6b250YWwgc2Nyb2xsaW5nXHJcbiAgICBoZWlnaHQ6IGF1dG87ICBcclxufVxyXG5cclxuKiB7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5hIHtcclxuICAgIGNvbG9yOiAkbWFpbk9yYW5nZTsgICAgIC8vIGFsbCBsaW5rcyB0YWdzIFxyXG59IiwiJG1haW5CbHVlOiAjMmY1NTcyO1xyXG4kbWFpbk9yYW5nZTogI2Q1OTU0MTtcclxuJGxpZ2h0Qmx1ZTogI2UwZTZlZjsiLCIud3JhcHBlciB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEuMTI1cmVtO1xyXG4gICAgcGFkZGluZy1yaWdodDogMS4xMjVyZW07XHJcbiAgICBtYXgtd2lkdGg6IDEyMzZweDsgIC8vIGJvcmRlci1ib3ggYWN0aXZlIGFkanVzdCBmb3IgcGFkZGluZ1xyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuOyAgIC8vIHNlZSBfcm93IFxyXG5cclxuICAgICYtLW1lZGl1bSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA5NzZweDtcclxuICAgIH1cclxuXHJcbiAgICAmLS1tb2JpbGUgeyAgICAgICAgICAgICAvLyBub25lIGZvciBtb2JpbGUgYW5kIHRhYmxldFxyXG4gICAgICAgIHBhZGRpbmctbGVmdDogMDtcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xyXG5cclxuICAgICAgICBAaW5jbHVkZSBhdExhcmdle1xyXG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEuMTI1cmVtO1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxLjEyNXJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi0tYm90dG9tTWFyZ2lue1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0U21hbGx7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMuODc1cmVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAud3JhcHBlciB7ICBcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XHJcbiAgICAgICAgcGFkZGluZy1yaWdodDogMDtcclxuICAgIH1cclxuICAgIC8vIGNhbmNlbHMgb3V0IHBhZGRpbmcgb25seSB3aGVuIGEgd3JhcHBlciBjbGFzcyBmb3VuZCBpbnNpZGUgYW4gZXhpc3Rpbmcgd3JhcHBlciAgICBcclxufSIsIkBtaXhpbiBhdFNtYWxsIHtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBAY29udGVudDtcclxuICAgIH1cclxufVxyXG4gIFxyXG5AbWl4aW4gYXRNZWRpdW0ge1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XHJcbiAgICAgIEBjb250ZW50O1xyXG4gICAgfVxyXG59XHJcbiAgXHJcbkBtaXhpbiBhdExhcmdlIHtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMDEwcHgpIHtcclxuICAgICAgQGNvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBtaXhpbiBjbGVhckZsb2F0IHtcclxuICAmOjphZnRlcntcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBjbGVhcjogYm90aDtcclxuICAgIGRpc3BsYXk6IHRhYmxlO1xyXG4gIH1cclxufSIsIi5sYXJnZS1oZXJvIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGJvcmRlci1ib3R0b206IDEwcHggc29saWQgJG1haW5CbHVlOyBcclxuXHJcbiAgICAmX190ZXh0LWNvbnRlbnQge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB0b3A6IDUwJTtcclxuICAgICAgICBwYWRkaW5nLXRvcDogNjBweDsgIC8vIGFjY291bnQgZm9yIHRoZSBoZWFkZXItYmFyIHRvIHBvc2l0aW9uIGluIG1pZGRsZVxyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7IFxyXG4gICAgfVxyXG4gICAgJl9fdGl0bGV7XHJcbiAgICAgICAgZm9udC1zaXplOiAyLjRyZW07XHJcbiAgICAgICAgY29sb3I6ICRtYWluQmx1ZTtcclxuICAgICAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuXHJcbiAgICAgICAgQGluY2x1ZGUgYXRTbWFsbHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiA0LjhyZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAmX19zdWJ0aXRsZXtcclxuICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcclxuICAgICAgICBjb2xvcjogJG1haW5CbHVlO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICAgICAgbWFyZ2luOiAwO1xyXG5cclxuICAgICAgICBAaW5jbHVkZSBhdFNtYWxse1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDIuOXJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAmX190ZXh0e1xyXG4gICAgICAgIGNvbG9yOiAjRkZGO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAxMDA7XHJcbiAgICAgICAgdGV4dC1zaGFkb3c6IDJweCAycHggMCByZ2JhKDAsIDAsIDAsIC4xKTtcclxuICAgICAgICBtYXgtd2lkdGg6IDMwcmVtO1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcclxuXHJcbiAgICAgICAgQGluY2x1ZGUgYXRTbWFsbHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjg3NXJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAmX19pbWFnZXtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIi5idG4ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJG1haW5CbHVlO1xyXG4gICAgY29sb3I6ICNGRkY7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBwYWRkaW5nOiAuNzVyZW0gMS4ycmVtO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIFxyXG4gICAgJi0tb3JhbmdlIHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1haW5PcmFuZ2U7XHJcbiAgICB9XHJcbiAgXHJcbiAgICAmLS1sYXJnZSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgICAgcGFkZGluZzogMC43cmVtIDEuNXJlbTtcclxuXHJcbiAgICAgIEBpbmNsdWRlIGF0U21hbGx7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjI1cmVtO1xyXG4gICAgICAgIHBhZGRpbmc6IDEuMXJlbSAxLjlyZW07XHJcbiAgICAgIH1cclxuICAgIH1cclxufSIsIi5wYWdlLXNlY3Rpb257XHJcbiAgICBwYWRkaW5nOiAxLjJyZW0gMDtcclxuXHJcbiAgICBAaW5jbHVkZSBhdFNtYWxsIHtcclxuICAgICAgICBwYWRkaW5nOiA0LjVyZW0gMDtcclxuICAgIH1cclxuXHJcbiAgICAmLS1ibHVle1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRtYWluQmx1ZTtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgIH1cclxuXHJcbiAgICAmLS1iYWNrZ3JvdW5kSW1hZ2V7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGxpZ2h0Qmx1ZTsgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIG1vYmlsZSBhbmQgdGFibGV0IGRvbid0IGdldCBoZWF2eSBpbWFnZVxyXG5cclxuICAgICAgICBAaW5jbHVkZSBhdExhcmdle1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJ3NyYy9pbWFnZXMvdGVzdGltb25pYWxzLWJnLmpwZycpIHRvcCBjZW50ZXIgbm8tcmVwZWF0O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgJi0tYlBhZGRpbmcge1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAwOyAgLy8gbm9uZSBmb3IgbW9iaWxlIGFuZCB0YWJsZXQgc2NyZWVucyBcclxuXHJcbiAgICAgICAgQGluY2x1ZGUgYXRMYXJnZSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxLjEyNXJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIuaGVhZGxpbmUge1xyXG4gICAgZm9udC1zaXplOiAxLjdyZW07XHJcbiAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgY29sb3I6ICRtYWluQmx1ZTtcclxuXHJcbiAgICBAaW5jbHVkZSBhdFNtYWxse1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMi44NzVyZW07XHJcbiAgICB9XHJcblxyXG4gICAgJl9fY2VudGVyZWR7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG5cclxuICAgICYtLW9yYW5nZXtcclxuICAgICAgICBjb2xvcjogJG1haW5PcmFuZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgJi0tc21hbGwge1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICAgIEBpbmNsdWRlIGF0U21hbGwge1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxLjg3NXJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJi0tbmFycm93IHtcclxuICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAmLS1saWdodEZvbnQge1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAxMDA7XHJcbiAgICB9XHJcblxyXG4gICAgJi0tYm90dG9tTWFyZ2luUyB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41ZW07XHJcbiAgICB9XHJcbiAgICBcclxuICAgICYtLWJvdHRvbU1hcmdpbkwge1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEuNmVtO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9uZyB7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIH1cclxuXHJcbiAgICAmLS1ub1RvcE1hcmdpbnsgICAgIC8vIHdoZW4gc3RhY2tlZCBvbiBzbWFsbCBzY3JlZW5zIGRlZmF1bHQgbWFyZ2luIGFwcGxpZXNcclxuICAgICAgICBAaW5jbHVkZSBhdE1lZGl1bXtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn0iLCIucm93IHtcclxuXHJcbiAgICAmLS1jb2x1bW5QYWRkaW5nIHtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IC02NXB4OyAgICAvLyBsYXN0IGNvbHVtbiBwYWRkaW5nIG92ZXJmbG93IHByb2JsZW0sIHNlZSBfd3JhcHBlclxyXG4gICAgfVxyXG5cclxuICAgICYtLWNvbHVtblBhZGRpbmcgPiBkaXYgeyAgICBcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiA2NXB4O1xyXG4gICAgfVxyXG4gICAgLyogd2l0aG91dCA+IGRpdiBpdCB3b3VsZCBiZSBhcHBsaWVkIHRvIGNvbnRhaW5lciBkaXYsIG5vdCB0aGUgZGl2IFxyXG4gICAgICAgZWxlbWVudHMgdGhhdCBtYWtlIHVwIHRoZSBjb2x1bW4gKi8gXHJcblxyXG4gICAgJi0tY29sdW1uUGFkZGluZy1sYXJnZSB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAtMTAwcHg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgICYtLWNvbHVtblBhZGRpbmctbGFyZ2UgPiBkaXYgeyAgICBcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIH1cclxuXHJcbiAgICAmLS1jb2x1bW5QYWRkaW5nLXNtYWxsIHtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IC00NXB4O1xyXG4gICAgfVxyXG5cclxuICAgICYtLWNvbHVtblBhZGRpbmctc21hbGwgPiBkaXYgeyAgICBcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiA0NXB4O1xyXG4gICAgfVxyXG5cclxuICAgICYtLXRvcFBhZGRpbmd7ICAgICAgICAgIC8vIHNlZSBjYXJkc19faW1hZ2VcclxuICAgICAgICBwYWRkaW5nLXRvcDogODBweDtcclxuICAgIH1cclxuXHJcbi8qICBjb2RlIGZvciBlcXVhbCBjYXJkIGhlaWdodCwgb25seSBzdGFydGluZyBhdExhcmdlIHNpemUgc2NyZWVuc1xyXG4gICAgY2FyZHMgZGl2IHVzZSBmbG9hdCAoc2VlIF9yb3cpIFxyXG4gICAgc3dpdGNoIHRvIGZsZXggYm94XHJcbiovXHJcbiAgICAmLS1jb2x1bW5IZWlnaHR7XHJcbiAgICAgICAgQGluY2x1ZGUgYXRMYXJnZXtcclxuICAgICAgICAgICAgZGlzcGxheTpmbGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAmID4gZGl2IHtcclxuICAgICAgICAgICAgZmxvYXQ6IG5vbmU7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgfVxyXG4gICAgfSAgIFxyXG5cclxuICAgIEBpbmNsdWRlIGNsZWFyRmxvYXQ7IFxyXG5cclxuLyogIFxyXG4gICAgVGhlIGxhcmdlLVggYXJlIHRoZSBiYXNlLXN0eWxlIGFwcGxpZWQgZm9yIGxhcmdlIHNjcmVlbnNcclxuICAgIFRoZSBtZWRpdW0tWCAoYmVsb3cpIGFyZSB0aGUgc3R5bGVzIGZvciBtZWRpdW0gYW5kIHVwXHJcbiAgICBTb21lIHBhZ2Utc2VjdGlvbiByZXF1aXJlIG1lZGl1bSwgb3RoZXJzIGxhcmdlLiBcclxuICAgIFggaXMgYmFzZWQgb24gMTIgY29sdW1uIGxheW91dCwgMS8zID0gNFxyXG4gICAgVGhlIG1vZGlmaWVycyBmb3Igc3BlY2lmaWMgY2FzZXMgXHJcbiovXHJcbiAgICBAaW5jbHVkZSBhdExhcmdlIHtcclxuXHJcbiAgICAgICAgJl9fbGFyZ2UtNCB7XHJcbiAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICAgICAgICB3aWR0aDogMzMuMzMlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbGFyZ2UtNC0tbGFyZ2Vye1xyXG4gICAgICAgICAgICB3aWR0aDogMzclO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbGFyZ2UtOCB7XHJcbiAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICAgICAgICB3aWR0aDogNjYuNjYlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbGFyZ2UtOC0tc21hbGxlciB7XHJcbiAgICAgICAgICAgIHdpZHRoOiA2MyU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19sYXJnZS02IHtcclxuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBpbmNsdWRlIGF0TWVkaXVtIHtcclxuICAgICAgICAvLyAgVGhlIGNvbHVtbi1YIGFyZSB0aGUgYmFzZS1zdHlsZXMgYXBwbGllZCBmb3IgbWVkaXVtIHNjcmVlbnMgYW5kIHVwXHJcbiAgICAgICAgLy8gIFggaXMgYmFzZWQgb24gMTIgY29sdW1uIGxheW91dCwgMS8zID0gNFxyXG4gICAgICAgIC8vICBUaGUgbW9kaWZpZXJzIGZvciBzcGVjaWZpYyBjYXNlc1xyXG4gICAgICAgICZfX21lZGl1bS00IHtcclxuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgICAgIHdpZHRoOiAzMy4zMyU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmX19tZWRpdW0tNC0tbGFyZ2Vye1xyXG4gICAgICAgICAgICB3aWR0aDogMzclO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJl9fbWVkaXVtLTgge1xyXG4gICAgICAgICAgICBmbG9hdDogbGVmdDtcclxuICAgICAgICAgICAgd2lkdGg6IDY2LjY2JTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX21lZGl1bS04LS1zbWFsbGVyIHtcclxuICAgICAgICAgICAgd2lkdGg6IDYzJTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICZfX21lZGl1bS02IHtcclxuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLmdlbmVyaWMtY29udGVudCB7XHJcbiAgICBwIHtcclxuICAgICAgICBsaW5lLWhlaWdodDogMS42NTtcclxuICAgICAgICBtYXJnaW46IDAgMCAxLjhyZW0gMDsgICAvLyBmZWF0dXJlcy1pdGVtICBwIHJlcXVpcmVzIDAgdG9wIG1hcmdpblxyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0U21hbGwge1xyXG4gICAgICAgICAgIGZvbnQtc2l6ZTogMS4xMjVyZW07XHJcbiAgICAgICAgfVxyXG4gICAgfSAgXHJcbiAgICBwIGEge1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICB9XHJcbn1cclxuIiwiLnNlY3Rpb24tdGl0bGV7XHJcbiAgICBmb250LXNpemU6IDIuNTVyZW07XHJcbiAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgIEBpbmNsdWRlIGF0U21hbGx7XHJcbiAgICAgICAgZm9udC1zaXplOiAzLjc1cmVtO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9uZyB7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgIH1cclxuXHJcbiAgICAmX19pY29uIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jazsgICAgIC8vIG9uIGl0J3Mgb3duIGxpbmUgb24gbW9iaWxlXHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG8gLjZyZW0gYXV0bztcclxuXHJcbiAgICAgICAgQGluY2x1ZGUgYXRTbWFsbHtcclxuICAgICAgICAgICAgbWFyZ2luOiAwIC42cmVtIDAgMDsgLy8gbmV4dCB0byB0aXRsZSBcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgIHRvcDogOHB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLS1ibHVlIHtcclxuICAgICAgICBjb2xvcjogJG1haW5CbHVlO1xyXG4gICAgfVxyXG59IiwiLmZlYXR1cmUtaXRlbSB7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMi41cmVtOyAgICAgLy8gc2VwZXJhdGUgdGhlIGZlYXR1cmUgcm93c1xyXG5cclxuICAgIEBpbmNsdWRlIGF0U21hbGwge1xyXG4gICAgICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgICZfX2ljb257XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0U21hbGwge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJl9fdGl0bGV7XHJcbiAgICAgICAgZm9udC1zaXplOiAxLjZyZW07XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjhyZW07XHJcbiAgICAgICAgbWFyZ2luLXRvcDogMC43cmVtO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHJcbiAgICAgICAgQGluY2x1ZGUgYXRTbWFsbCB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS44NzVyZW07XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDFyZW07XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLmNhcmRzIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsIC43KTtcclxuICAgIHBhZGRpbmc6IDAgMS4xMjVyZW0gMXB4IDEuMTI0cmVtO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogOHJlbTsgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qICBcclxuICAgICAgICByZWR1Y2VkIHBhZGRpbmcgYW5kIGFkZGVkIG1hcmdpbi1ib3R0b20gZm9yIG1vYmlsZSBhbmQgdGFibGV0XHJcbiAgICAgICAgdGhlIDFweCBib3R0b20gZ2l2ZXMgdGhlIHAgc29tZXRoaW5nIHRvIHB1c2ggdXAgYWdhaW5zdCBcclxuICAgICAgICBleHRyYSBtYXJnaW4tYiBoYXMgdG8gYmUgcmVtb3ZlZCBvbiBsYXN0IGNhcmQgKG1vYmlsZSlcclxuICAgICAgICAqL1xyXG5cclxuICAgICYtLWxhc3QtY2FyZCB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgIH1cclxuXHJcbiAgICBAaW5jbHVkZSBhdExhcmdlIHtcclxuICAgICAgICBwYWRkaW5nOiAwIDEuOHJlbSAxcHggMS44cmVtOyAgIFxyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICB9XHJcblxyXG4gICAgJl9faW1hZ2V7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIHRvcDogLTgwcHg7ICAgICAgICAgLy8gaGFsZiBvZiB0aGUgaW1nIGhlaWdodFxyXG4gICAgICAgIGJvcmRlcjogc29saWQgNXB4IHJnYmEoMjU1LDI1NSwyNTUsIC43KTtcclxuICAgICAgICBcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICAgICAgd2lkdGg6IDE2MHB4O1xyXG4gICAgICAgIGhlaWdodDogMTYwcHg7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuXHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG8gLTgwcHggYXV0bztcclxuICAgIH1cclxuXHJcbiAgICAmX190aXRsZXtcclxuICAgICAgICBjb2xvcjogJG1haW5CbHVlO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICB9XHJcblxyXG4gICAgJl9fc3VidGl0bGV7XHJcbiAgICAgICAgY29sb3I6ICRtYWluT3JhbmdlO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIG1hcmdpbjogLjI1cmVtIDAgMXJlbSAwO1xyXG4gICAgfVxyXG59IiwiLnNpdGUtZm9vdGVye1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJG1haW5CbHVlO1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICBwYWRkaW5nOiAuNXJlbSAwO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgICZfX3RleHQge1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrOyAgICAgICAgIC8vIHNlcGVyYXRlIGxpbmUgZm9yIGJ1dHRvbiBhbmQgdGV4dCBvbiBtb2JpbGVcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAyMDA7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0TWVkaXVtIHtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lO1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW07XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDByZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLnNpdGUtaGVhZGVye1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgei1pbmRleDogMTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogLjZyZW0gMDtcclxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgLjNzIGVhc2Utb3V0O1xyXG5cclxuICAgIEBpbmNsdWRlIGF0TWVkaXVtIHsgICAgIC8vIG5vIG5hdkJhciBvbiBzbWFsbCBzY3JlZW5zXHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgkbWFpbkJsdWUsLjMpO1xyXG4gICAgfVxyXG5cclxuICAgICYtLWV4cGFuZCB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgkbWFpbkJsdWUsIDAuNTUpO1xyXG4gICAgfVxyXG5cclxuICAgICZfX2J0biB7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0TWVkaXVte1xyXG4gICAgICAgICAgICBmbG9hdDpyaWdodDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJl9fbG9nbyB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1haW5CbHVlO1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB0b3A6IDA7ICAgICAgICAgICAgICAgICAvLyBjYW5jZWxzIG91dCB0aGUgc2l0ZS1oZWFkZXIgcGFkZGluZy10b3BcclxuICAgICAgICBwYWRkaW5nOiAxcmVtIDEuNzVyZW07XHJcbiAgICAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSBzY2FsZSguOCk7XHJcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDA7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0TWVkaXVte1xyXG4gICAgICAgICAgICBsZWZ0OiBhdXRvO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDEuNXJlbSAzcmVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmX19sb2dvX19zZW9UZXh0IHtcclxuICAgICAgICBmb250LXNpemU6IDA7ICAgICAgIC8vIG9yIHRleHQtaW5kZW50OiAtOTk5OXB4XHJcbiAgICB9XHJcblxyXG4gICAgJl9fbWVudUNvbnRlbnR7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgei1pbmRleDogLTEwO1xyXG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAuM3MgZWFzZS1vdXQ7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDUuNjI1cmVtO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0TWVkaXVte1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICB6LWluZGV4OiAxO1xyXG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMDsgICAgIC8vIGNhbmNlbCBvdXQgdGhlIGJhc2UgcGFkZGluZy10b3BcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtLXZpc2libGV7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIHotaW5kZXg6IDE7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICZfX21lbnVJY29uIHtcclxuICAgICAgICB3aWR0aDogMS4yNXJlbTtcclxuICAgICAgICBoZWlnaHQ6IDEuMTg3NXJlbTtcclxuICAgICAgICBcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiAuNnJlbTtcclxuICAgICAgICByaWdodDogLjZyZW07XHJcbiAgICAgICAgei1pbmRleDogMTA7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0TWVkaXVtIHtcclxuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICY6OmJlZm9yZXtcclxuICAgICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICB0b3A6IDA7XHJcbiAgICAgICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkY7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxLjI1cmVtO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IC4xODc1cmVtO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAuM3MgZWFzZS1vdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICZfX21pZGRsZUJhcntcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICB0b3A6IC41cmVtO1xyXG4gICAgICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGO1xyXG4gICAgICAgICAgICB3aWR0aDogMS4yNXJlbTtcclxuICAgICAgICAgICAgaGVpZ2h0OiAuMTg3NXJlbTtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIC4zcyBlYXNlLW91dDtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCA1MCU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmOjphZnRlcntcclxuICAgICAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICBib3R0b206IDA7XHJcbiAgICAgICAgICAgIGxlZnQ6MCA7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkY7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxLjI1cmVtO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IC4xODc1cmVtO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDEwMCU7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAuM3MgZWFzZS1vdXQ7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAmLS1jbG9zZSB7XHJcbiAgICAgICAgICAgICY6OmJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgc2NhbGVYKDEuMjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5zaXRlLWhlYWRlcl9fbWVudUljb25fX21pZGRsZUJhciB7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAmOjphZnRlciB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpIHNjYWxlWCgxLjI1KSB0cmFuc2xhdGVZKDFweCk7IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLnByaW1hcnlOYXYge1xyXG5cclxuICAgIHBhZGRpbmctdG9wOiAwLjZyZW07XHJcblxyXG4gICAgQGluY2x1ZGUgYXRNZWRpdW17XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHVsIHtcclxuICAgICAgICBwYWRkaW5nOiAwO1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICBAaW5jbHVkZSBjbGVhckZsb2F0ICAgICAvLyBjbGVhcnMgdGhlIGxpIGZsb2F0c1xyXG4gICAgfVxyXG5cclxuICAgIGxpIHtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAuMzFyZW07XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0TWVkaXVte1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxLjEyNXJlbTtcclxuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsaTpsYXN0LWNoaWxke1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDA7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIGF0TWVkaXVte1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxLjEyNXJlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYSB7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcGFkZGluZzogLjMxcmVtIDAuNHJlbTtcclxuICAgICAgICBmb250LXNpemU6IDAuOHJlbTtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCRtYWluQmx1ZSwgMC41KTtcclxuXHJcbiAgICAgICAgQGluY2x1ZGUgYXRNZWRpdW17XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IC43NXJlbSAwO1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmLS1mbG9hdFJpZ2h0IHtcclxuICAgICAgICBAaW5jbHVkZSBhdE1lZGl1bXtcclxuICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIl19 */
